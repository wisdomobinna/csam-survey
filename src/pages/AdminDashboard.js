// src/pages/AdminDashboard.js - Updated with Enhanced Assignment System and Capacity Monitoring
import React, { useState, useEffect, useCallback } from 'react';
import { useNavigate } from 'react-router-dom';
import { collection, getDocs, doc, deleteDoc, writeBatch, serverTimestamp } from 'firebase/firestore';
import { ref, getDownloadURL } from 'firebase/storage';
import { db, storage } from '../firebase/config';
import {
  Box,
  Container,
  Heading,
  VStack,
  HStack,
  Text,
  Button,
  Card,
  CardBody,
  CardHeader,
  Stat,
  StatLabel,
  StatNumber,
  StatHelpText,
  SimpleGrid,
  Badge,
  Table,
  Thead,
  Tbody,
  Tr,
  Th,
  Td,
  TableContainer,
  useToast,
  Alert,
  AlertIcon,
  AlertTitle,
  AlertDescription,
  Spinner,
  Flex,
  Progress,
  Modal,
  ModalOverlay,
  ModalContent,
  ModalHeader,
  ModalFooter,
  ModalBody,
  ModalCloseButton,
  useDisclosure,
  UnorderedList,
  ListItem,
  InputGroup,
  InputLeftElement,
  Input,
  Select,
  Code,
  NumberInput,
  NumberInputField,
  NumberInputStepper,
  NumberIncrementStepper,
  NumberDecrementStepper,
  FormControl,
  FormLabel,
  FormHelperText,
  Divider,
  Accordion,
  AccordionItem,
  AccordionButton,
  AccordionPanel,
  AccordionIcon,
  Textarea,
} from '@chakra-ui/react';

// Import enhanced assignment system utilities
import { fixAllUserAssignments } from '../utils/fixUserAssignments';
import { 
  getAssignmentStats, 
  resetImageAssignments, 
  clearAllData 
} from '../utils/firebaseSetup';
import { 
  getAssignmentStatistics, 
  checkAssignmentCapacity, 
  resetAssignmentCounts,
  getBalancedImageAssignment 
} from '../utils/balancedImageAssignment';

const AdminDashboard = () => {
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [users, setUsers] = useState([]);
  const [stats, setStats] = useState({
    totalUsers: 0,
    completedSurveys: 0,
    activeUsers: 0,
    testUsers: 0,
    prolificUsers: 0,
    preAssignedUsers: 0,
    autoGenerated: 0,
    totalImages: 0,
    assignedImages: 0,
    averageCompletion: 0
  });
  const [imageStats, setImageStats] = useState(null);
  const [selectedUser, setSelectedUser] = useState(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [filterType, setFilterType] = useState('all');
  const [prolificUrl, setProlificUrl] = useState('');
  
  // Participant creation state
  const [participantCount, setParticipantCount] = useState(10);
  const [participantPrefix, setParticipantPrefix] = useState('P');
  const [startingNumber, setStartingNumber] = useState(1);
  const [imagesPerParticipant, setImagesPerParticipant] = useState(10);
  const [createLoading, setCreateLoading] = useState(false);

  const { isOpen: isUserModalOpen, onOpen: onUserModalOpen, onClose: onUserModalClose } = useDisclosure();
  const { isOpen: isStatsModalOpen, onOpen: onStatsModalOpen, onClose: onStatsModalClose } = useDisclosure();
  const { isOpen: isProlificModalOpen, onOpen: onProlificModalOpen, onClose: onProlificModalClose } = useDisclosure();
  const { isOpen: isCreateModalOpen, onOpen: onCreateModalOpen, onClose: onCreateModalClose } = useDisclosure();

  const navigate = useNavigate();
  const toast = useToast();

  const loadDashboardData = useCallback(async () => {
    try {
      setLoading(true);
      console.log('Loading admin dashboard data...');
      
      // Load users
      const usersRef = collection(db, 'loginIDs');
      const usersSnapshot = await getDocs(usersRef);
      
      const usersData = [];
      let completedCount = 0;
      let activeCount = 0;
      let testCount = 0;
      let prolificCount = 0;
      let preAssignedCount = 0;
      let autoGeneratedCount = 0;
      let totalAssignedImages = 0;
      let totalCompletedImages = 0;
      
      usersSnapshot.forEach(doc => {
        const userData = doc.data();
        const userId = doc.id;
        
        // Skip admin user
        if (userId === 'ADMIN') return;
        
        const userType = determineUserType(userData, userId);
        
        const isCompleted = userData.surveyCompleted || false;
        const isActive = userData.isActive !== false;
        const demographicsCompleted = userData.demographicsCompleted || false;
        const hasConsented = userData.hasConsented || false;
        
        // Enhanced display information for new Prolific system
        let displayInfo = {
          primaryId: userId,
          prolificPid: null,
          displayLabel: userId
        };
        
        if (userData.prolificPid || userData.prolificData?.prolificPid) {
          displayInfo.prolificPid = userData.prolificPid || userData.prolificData?.prolificPid;
          if (userType.isAutoGenerated) {
            displayInfo.displayLabel = `${displayInfo.prolificPid} (${userId.substring(0, 12)}...)`;
          }
        }
        
        usersData.push({
          id: userId,
          displayId: userData.displayId || userId,
          displayInfo,
          ...userData,
          ...userType,
          isCompleted,
          isActive,
          demographicsCompleted,
          hasConsented,
          completedImages: userData.completedImages || 0,
          totalImages: userData.assignedImages?.length || 0,
          completionPercentage: userData.assignedImages?.length > 0 
            ? Math.round((userData.completedImages || 0) / userData.assignedImages.length * 100)
            : 0
        });
        
        // Count using new detection logic
        if (isCompleted) completedCount++;
        if (isActive) activeCount++;
        if (userType.isTest) testCount++;
        if (userType.isProlific) prolificCount++;
        if (userType.isPreAssigned) preAssignedCount++;
        if (userType.isAutoGenerated) autoGeneratedCount++;
        
        totalAssignedImages += userData.assignedImages?.length || 0;
        totalCompletedImages += userData.completedImages || 0;
      });
      
      // Sort users by creation date (newest first)
      usersData.sort((a, b) => {
        const dateA = a.createdAt?.toDate?.() || new Date(0);
        const dateB = b.createdAt?.toDate?.() || new Date(0);
        return dateB - dateA;
      });
      
      setUsers(usersData);
      
      // Calculate average completion rate
      const averageCompletion = usersData.length > 0 
        ? Math.round(totalCompletedImages / Math.max(totalAssignedImages, 1) * 100)
        : 0;
      
      setStats({
        totalUsers: usersData.length,
        completedSurveys: completedCount,
        activeUsers: activeCount,
        testUsers: testCount,
        prolificUsers: prolificCount,
        preAssignedUsers: preAssignedCount,
        autoGenerated: autoGeneratedCount,
        totalImages: totalAssignedImages,
        assignedImages: totalAssignedImages,
        averageCompletion
      });
      
      // Load image assignment statistics
      try {
        const assignmentStats = await getAssignmentStats();
        setImageStats(assignmentStats);
      } catch (error) {
        console.warn('Could not load image statistics:', error);
      }
      
      console.log('Dashboard data loaded:', {
        users: usersData.length,
        prolific: prolificCount,
        autoGenerated: autoGeneratedCount,
        preAssigned: preAssignedCount,
        test: testCount
      });
      
    } catch (error) {
      console.error('Error loading dashboard data:', error);
      setError(error.message);
      toast({
        title: 'Error Loading Dashboard',
        description: error.message,
        status: 'error',
        duration: 5000,
      });
    } finally {
      setLoading(false);
    }
  }, [toast]);

  useEffect(() => {
    const isAdmin = sessionStorage.getItem('isAdmin');
    const loginId = sessionStorage.getItem('userLoginId');
    
    if (!isAdmin || loginId !== 'ADMIN') {
      toast({
        title: 'Access Denied',
        description: 'Admin credentials required',
        status: 'error',
        duration: 3000,
      });
      navigate('/login');
      return;
    }
    
    loadDashboardData();
    generateProlificUrl();
  }, [navigate, toast, loadDashboardData]);

  // Enhanced user type detection for new Prolific integration
  const determineUserType = (userData, userId) => {
    const isAutoGenerated = userId.startsWith('login_') && userId.includes('_');
    
    const isTest = userData.source === 'test' || 
                   userData.prolificData?.isTestUser || 
                   userId.includes('TEST') ||
                   userData.testParticipant ||
                   (userData.prolificPid && userData.prolificPid.includes('TEST'));
    
    const isProlific = (userData.source === 'prolific' || 
                       userData.prolificData?.prolificPid ||
                       userData.prolificPid) && !isTest;
    
    const isPreAssigned = userData.preAssigned || 
                         userData.source === 'pre-assigned' ||
                         userData.preAssignmentDetails;
    
    return {
      isAutoGenerated,
      isTest,
      isProlific,
      isPreAssigned
    };
  };

  const generateProlificUrl = () => {
    const baseUrl = window.location.origin;
    const prolificParams = new URLSearchParams({
      PROLIFIC_PID: '{{%PROLIFIC_PID%}}',
      STUDY_ID: '{{%STUDY_ID%}}',
      SESSION_ID: '{{%SESSION_ID%}}'
    });
    
    const fullUrl = `${baseUrl}/login?${prolificParams.toString()}`;
    setProlificUrl(fullUrl);
  };

  // ENHANCED: Assignment Capacity Monitor Component
  const AssignmentCapacityMonitor = () => {
    const [capacityData, setCapacityData] = useState(null);
    const [assignmentStats, setAssignmentStats] = useState(null);
    const [capacityLoading, setCapacityLoading] = useState(true);

    const loadCapacityData = async () => {
      try {
        setCapacityLoading(true);
        const [capacity, stats] = await Promise.all([
          checkAssignmentCapacity(),
          getAssignmentStatistics()
        ]);
        
        setCapacityData(capacity);
        setAssignmentStats(stats);
      } catch (error) {
        console.error('Error loading capacity data:', error);
      } finally {
        setCapacityLoading(false);
      }
    };

    const handleResetCounts = async () => {
      if (!window.confirm('Reset all assignment counts? This will reset the 5-assignment limit tracking.')) {
        return;
      }
      
      try {
        await resetAssignmentCounts();
        toast({
          title: 'Assignment Counts Reset',
          description: 'All assignment counts have been reset to 0',
          status: 'success',
          duration: 3000,
        });
        loadCapacityData();
        loadDashboardData(); // Refresh main dashboard
      } catch (error) {
        toast({
          title: 'Reset Failed',
          description: error.message,
          status: 'error',
          duration: 5000,
        });
      }
    };

    useEffect(() => {
      loadCapacityData();
    }, []);

    if (capacityLoading) {
      return (
        <Card>
          <CardBody>
            <Flex justify="center" align="center" p={4}>
              <Spinner />
            </Flex>
          </CardBody>
        </Card>
      );
    }

    return (
      <Card>
        <CardHeader>
          <HStack justify="space-between">
            <Heading size="md">🎯 Assignment Capacity Monitor</Heading>
            <HStack>
              <Button size="sm" onClick={loadCapacityData}>🔄 Refresh</Button>
              <Button size="sm" colorScheme="orange" onClick={handleResetCounts}>
                🔄 Reset Counts
              </Button>
            </HStack>
          </HStack>
        </CardHeader>
        <CardBody>
          <VStack spacing={6}>
            {/* Capacity Status */}
            <Alert status={capacityData?.canAssign ? "success" : "warning"}>
              <AlertIcon />
              <Box>
                <AlertTitle>
                  {capacityData?.canAssign ? "✅ Can Accept New Users" : "⚠️ Capacity Limited"}
                </AlertTitle>
                <AlertDescription>
                  {capacityData?.canAssign 
                    ? capacityData.message 
                    : capacityData?.reason || "Unknown capacity status"
                  }
                </AlertDescription>
              </Box>
            </Alert>

            {/* Assignment Statistics */}
            {assignmentStats && (
              <SimpleGrid columns={{ base: 1, md: 2 }} spacing={6} w="full">
                {/* Set 1 Statistics */}
                <Card variant="outline">
                  <CardHeader>
                    <Heading size="sm">Set 1 (Images 1-1200)</Heading>
                  </CardHeader>
                  <CardBody>
                    <VStack spacing={3} align="start">
                      <HStack justify="space-between" w="full">
                        <Text fontSize="sm">Available for assignment:</Text>
                        <Badge colorScheme="green">{assignmentStats.set1.available}</Badge>
                      </HStack>
                      <HStack justify="space-between" w="full">
                        <Text fontSize="sm">At 5-assignment limit:</Text>
                        <Badge colorScheme="red">{assignmentStats.set1.fullyAssigned}</Badge>
                      </HStack>
                      <HStack justify="space-between" w="full">
                        <Text fontSize="sm">Near limit (4+ assignments):</Text>
                        <Badge colorScheme="orange">{assignmentStats.set1.nearLimit}</Badge>
                      </HStack>
                      
                      <Divider />
                      <Text fontSize="xs" color="gray.600">Assignment breakdown:</Text>
                      <VStack spacing={1} align="start" w="full">
                        {Object.entries(assignmentStats.set1).map(([count, images]) => {
                          if (count === 'total' || count === 'fullyAssigned' || count === 'available' || count === 'nearLimit') return null;
                          return (
                            <HStack key={count} justify="space-between" w="full">
                              <Text fontSize="xs">{count} assignments:</Text>
                              <Text fontSize="xs" fontWeight="bold">{images} images</Text>
                            </HStack>
                          );
                        })}
                      </VStack>
                    </VStack>
                  </CardBody>
                </Card>

                {/* Set 2 Statistics */}
                <Card variant="outline">
                  <CardHeader>
                    <Heading size="sm">Set 2 (Images 1201-2400)</Heading>
                  </CardHeader>
                  <CardBody>
                    <VStack spacing={3} align="start">
                      <HStack justify="space-between" w="full">
                        <Text fontSize="sm">Available for assignment:</Text>
                        <Badge colorScheme="green">{assignmentStats.set2.available}</Badge>
                      </HStack>
                      <HStack justify="space-between" w="full">
                        <Text fontSize="sm">At 5-assignment limit:</Text>
                        <Badge colorScheme="red">{assignmentStats.set2.fullyAssigned}</Badge>
                      </HStack>
                      <HStack justify="space-between" w="full">
                        <Text fontSize="sm">Near limit (4+ assignments):</Text>
                        <Badge colorScheme="orange">{assignmentStats.set2.nearLimit}</Badge>
                      </HStack>
                      
                      <Divider />
                      <Text fontSize="xs" color="gray.600">Assignment breakdown:</Text>
                      <VStack spacing={1} align="start" w="full">
                        {Object.entries(assignmentStats.set2).map(([count, images]) => {
                          if (count === 'total' || count === 'fullyAssigned' || count === 'available' || count === 'nearLimit') return null;
                          return (
                            <HStack key={count} justify="space-between" w="full">
                              <Text fontSize="xs">{count} assignments:</Text>
                              <Text fontSize="xs" fontWeight="bold">{images} images</Text>
                            </HStack>
                          );
                        })}
                      </VStack>
                    </VStack>
                  </CardBody>
                </Card>
              </SimpleGrid>
            )}

            {/* System Configuration */}
            <Card variant="outline" w="full">
              <CardHeader>
                <Heading size="sm">Enhanced Assignment System Configuration</Heading>
              </CardHeader>
              <CardBody>
                <SimpleGrid columns={{ base: 2, md: 4 }} spacing={4}>
                  <VStack>
                    <Text fontSize="sm" fontWeight="bold">Max Assignments per Image</Text>
                    <Badge colorScheme="blue" size="lg">5</Badge>
                  </VStack>
                  <VStack>
                    <Text fontSize="sm" fontWeight="bold">Images per User</Text>
                    <Badge colorScheme="green" size="lg">10</Badge>
                  </VStack>
                  <VStack>
                    <Text fontSize="sm" fontWeight="bold">Images per Set</Text>
                    <Badge colorScheme="purple" size="lg">5</Badge>
                  </VStack>
                  <VStack>
                    <Text fontSize="sm" fontWeight="bold">Assignment Type</Text>
                    <Badge colorScheme="orange" size="lg">Mixed</Badge>
                  </VStack>
                </SimpleGrid>
              </CardBody>
            </Card>

            {/* Quick Actions */}
            <Card variant="outline" w="full">
              <CardHeader>
                <Heading size="sm">Quick Actions</Heading>
              </CardHeader>
              <CardBody>
                <HStack spacing={4} wrap="wrap">
                  <Button
                    size="sm"
                    colorScheme="blue"
                    onClick={loadCapacityData}
                    leftIcon={<span>🔄</span>}
                  >
                    Refresh Capacity
                  </Button>
                  
                  <Button
                    size="sm"
                    colorScheme="teal"
                    onClick={() => {
                      const estimatedUsers = Math.min(
                        Math.floor((assignmentStats?.set1?.available || 0) / 5),
                        Math.floor((assignmentStats?.set2?.available || 0) / 5)
                      );
                      toast({
                        title: 'Capacity Estimate',
                        description: `Can accommodate approximately ${estimatedUsers} more users`,
                        status: 'info',
                        duration: 5000,
                      });
                    }}
                    leftIcon={<span>📊</span>}
                  >
                    Calculate Capacity
                  </Button>
                  
                  <Button
                    size="sm"
                    colorScheme="orange"
                    onClick={handleResetCounts}
                    leftIcon={<span>🔄</span>}
                  >
                    Reset All Counts
                  </Button>
                  
                  <Button
                    size="sm"
                    colorScheme="purple"
                    onClick={() => {
                      // Export assignment data
                      const exportData = {
                        capacityData,
                        assignmentStats,
                        exportedAt: new Date().toISOString()
                      };
                      
                      const blob = new Blob([JSON.stringify(exportData, null, 2)], 
                        { type: 'application/json' });
                      const url = URL.createObjectURL(blob);
                      const a = document.createElement('a');
                      a.href = url;
                      a.download = `assignment_stats_${new Date().toISOString().split('T')[0]}.json`;
                      a.click();
                      URL.revokeObjectURL(url);
                    }}
                    leftIcon={<span>📥</span>}
                  >
                    Export Stats
                  </Button>
                </HStack>
              </CardBody>
            </Card>
          </VStack>
        </CardBody>
      </Card>
    );
  };

  // ENHANCED: Get available images with verification for enhanced assignment
  const getAvailableImagesForAssignment = async () => {
    try {
      console.log('AdminDashboard: Checking available images with enhanced system...');
      
      // Check assignment capacity first
      const capacity = await checkAssignmentCapacity();
      if (!capacity.canAssign) {
        throw new Error(`Assignment capacity exceeded: ${capacity.reason}`);
      }
      
      // Test sample images to verify storage structure
      const testImages = [
        { path: 'set1/1.png', set: 'set1' },
        { path: 'set1/100.png', set: 'set1' },
        { path: 'set1/500.png', set: 'set1' },
        { path: 'set2/1201.png', set: 'set2' },
        { path: 'set2/1300.png', set: 'set2' },
        { path: 'set2/1500.png', set: 'set2' }
      ];
      
      let set1Exists = false;
      let set2Exists = false;
      
      console.log('Testing sample images to verify storage structure...');
      
      for (const testImg of testImages) {
        try {
          const imageRef = ref(storage, testImg.path);
          await getDownloadURL(imageRef);
          if (testImg.set === 'set1') {
            set1Exists = true;
          } else {
            set2Exists = true;
          }
          console.log(`✓ Found ${testImg.path}`);
        } catch (error) {
          console.warn(`✗ Test image ${testImg.path} not found`);
        }
      }
      
      if (!set1Exists && !set2Exists) {
        throw new Error('No image sets found in Firebase Storage. Please upload images first.');
      }
      
      if (!set1Exists) {
        console.warn('Warning: No set1 images found. Only set2 will be used.');
      }
      
      if (!set2Exists) {
        console.warn('Warning: No set2 images found. Only set1 will be used.');
      }
      
      console.log(`✓ Enhanced assignment system ready. Capacity: ${capacity.message}`);
      return { capacity, set1Exists, set2Exists };
      
    } catch (error) {
      console.error('AdminDashboard: Error checking enhanced assignment availability:', error);
      throw error;
    }
  };

  // ENHANCED: Create pre-assigned participants with enhanced assignment system
  const createPreAssignedParticipants = async () => {
    try {
      setCreateLoading(true);
      
      console.log('Creating pre-assigned participants with enhanced assignment system...', {
        count: participantCount,
        prefix: participantPrefix,
        startingNumber,
        imagesPerParticipant
      });
      
      // Check capacity first
      const { capacity } = await getAvailableImagesForAssignment();
      
      if (capacity.estimatedCapacity < participantCount) {
        throw new Error(`Cannot create ${participantCount} participants. System can only accommodate ${capacity.estimatedCapacity} more users.`);
      }
      
      // Generate participant IDs
      const participantIds = [];
      for (let i = 0; i < participantCount; i++) {
        const number = (startingNumber + i).toString().padStart(4, '0');
        const participantId = participantPrefix === 'numeric' ? number : `${participantPrefix}${number}`;
        participantIds.push(participantId);
      }
      
      console.log('Generated participant IDs:', participantIds);
      
      // Create participants with enhanced image assignments
      const batch = writeBatch(db);
      
      for (let i = 0; i < participantIds.length; i++) {
        const participantId = participantIds[i];
        
        // Use enhanced assignment system
        const assignedImages = await getBalancedImageAssignment(participantId, imagesPerParticipant);
        
        console.log(`Enhanced assignment for ${participantId}: ${assignedImages.length} images`);
        console.log(`  - Set1: ${assignedImages.filter(img => img.set === 'set1').length} images`);
        console.log(`  - Set2: ${assignedImages.filter(img => img.set === 'set2').length} images`);
        console.log(`  - Mixed order: ${assignedImages.map(img => img.set).join(' → ')}`);
        
        const userRef = doc(db, 'loginIDs', participantId);
        const userData = {
          internalUserId: participantId,
          displayId: participantId,
          assignedImages: assignedImages,
          completedImages: 0,
          completedImageIds: [],
          totalImages: assignedImages.length,
          surveyCompleted: false,
          hasConsented: false,
          demographicsCompleted: false,
          createdAt: serverTimestamp(),
          isActive: true,
          source: 'pre-assigned',
          preAssigned: true,
          preAssignedAt: serverTimestamp(),
          imageAssignmentStatus: 'assigned',
          enhancedAssignment: true, // Flag for enhanced system
          preAssignmentDetails: {
            batchCreated: true,
            batchTimestamp: new Date().toISOString(),
            imagesPerParticipant: assignedImages.length,
            set1Count: assignedImages.filter(img => img.set === 'set1').length,
            set2Count: assignedImages.filter(img => img.set === 'set2').length,
            enhancedAssignment: true,
            assignmentSystem: 'enhanced_balanced_5_limit',
            mixedOrder: assignedImages.map(img => img.set).join(' → ')
          }
        };
        
        batch.set(userRef, userData);
      }
      
      await batch.commit();
      
      console.log(`Successfully created ${participantIds.length} pre-assigned participants with enhanced assignment system`);
      
      toast({
        title: 'Enhanced Participants Created Successfully',
        description: `Created ${participantIds.length} participants with ${imagesPerParticipant} mixed images each (5-assignment limit)`,
        status: 'success',
        duration: 5000,
      });
      
      // Close modal and reload data
      onCreateModalClose();
      loadDashboardData();
      
    } catch (error) {
      console.error('Error creating enhanced pre-assigned participants:', error);
      toast({
        title: 'Creation Failed',
        description: error.message,
        status: 'error',
        duration: 5000,
        isClosable: true,
      });
    } finally {
      setCreateLoading(false);
    }
  };

  // ENHANCED: Create test participants with enhanced assignment system
  const createTestParticipantsWithEnhancedAssignment = async () => {
    try {
      setLoading(true);
      
      console.log('Creating test participants with enhanced assignment system...');
      
      // Check capacity first
      const capacity = await checkAssignmentCapacity();
      if (!capacity.canAssign) {
        throw new Error(`Cannot create test participants: ${capacity.reason}`);
      }
      
      const participantIds = ['TEST_0001', 'TEST_0002', 'TEST_0003', 'TEST_0004', 'TEST_0005'];
      const batch = writeBatch(db);
      
      for (let i = 0; i < participantIds.length; i++) {
        const participantId = participantIds[i];
        console.log(`Creating enhanced test participant: ${participantId}`);
        
        // Use enhanced assignment system
        const assignedImages = await getBalancedImageAssignment(participantId, 10);
        
        console.log(`  Assigned ${assignedImages.length} enhanced images`);
        console.log(`  Mixed order: ${assignedImages.map(img => img.set).join(' → ')}`);
        
        const userRef = doc(db, 'loginIDs', participantId);
        const userData = {
          internalUserId: participantId,
          displayId: participantId,
          assignedImages: assignedImages,
          completedImages: 0,
          completedImageIds: [],
          totalImages: assignedImages.length,
          surveyCompleted: false,
          hasConsented: false,
          demographicsCompleted: false,
          createdAt: serverTimestamp(),
          isActive: true,
          source: 'test',
          preAssigned: true,
          preAssignedAt: serverTimestamp(),
          testParticipant: true,
          imageAssignmentStatus: 'assigned',
          enhancedAssignment: true, // Flag for enhanced system
          preAssignmentDetails: {
            testParticipant: true,
            enhancedAssignment: true,
            assignmentSystem: 'enhanced_balanced_5_limit',
            set1Count: assignedImages.filter(img => img.set === 'set1').length,
            set2Count: assignedImages.filter(img => img.set === 'set2').length,
            mixedOrder: assignedImages.map(img => img.set).join(' → ')
          }
        };
        
        batch.set(userRef, userData);
      }
      
      await batch.commit();
      
      console.log('Test participants created successfully with enhanced assignment system');
      
      toast({
        title: 'Enhanced Test Participants Created',
        description: `Created ${participantIds.length} test participants with 5-assignment limit system`,
        status: 'success',
        duration: 5000,
      });
      
      // Reload dashboard data
      loadDashboardData();
      
    } catch (error) {
      console.error('Error creating enhanced test participants:', error);
      toast({
        title: 'Creation Failed',
        description: error.message,
        status: 'error',
        duration: 5000,
      });
    } finally {
      setLoading(false);
    }
  };

  const handleDeleteUser = async (userId) => {
    if (!window.confirm(`Are you sure you want to delete user ${userId}? This cannot be undone.`)) {
      return;
    }
    
    try {
      await deleteDoc(doc(db, 'loginIDs', userId));
      
      toast({
        title: 'User Deleted',
        description: `User ${userId} has been removed`,
        status: 'success',
        duration: 3000,
      });
      
      // Reload data
      loadDashboardData();
    } catch (error) {
      console.error('Error deleting user:', error);
      toast({
        title: 'Delete Failed',
        description: error.message,
        status: 'error',
        duration: 5000,
      });
    }
  };

  const handleFixAssignments = async () => {
    if (!window.confirm('Fix all user image assignments? This will update image paths for users with old format names.')) {
      return;
    }
    
    try {
      setLoading(true);
      
      toast({
        title: 'Fixing Assignments',
        description: 'This may take a few minutes...',
        status: 'info',
        duration: 3000,
      });
      
      const result = await fixAllUserAssignments();
      
      toast({
        title: 'Assignment Fix Complete',
        description: `Fixed ${result.successful}/${result.total} users`,
        status: result.failed > 0 ? 'warning' : 'success',
        duration: 5000,
      });
      
      // Reload data
      loadDashboardData();
    } catch (error) {
      console.error('Error fixing assignments:', error);
      toast({
        title: 'Fix Failed',
        description: error.message,
        status: 'error',
        duration: 5000,
      });
    } finally {
      setLoading(false);
    }
  };

  const handleResetAssignments = async () => {
    if (!window.confirm('Reset all image assignment counts? This will reset the tracking of how many times each image has been assigned.')) {
      return;
    }
    
    try {
      await resetImageAssignments();
      
      toast({
        title: 'Assignments Reset',
        description: 'Image assignment counts have been reset',
        status: 'success',
        duration: 3000,
      });
      
      loadDashboardData();
    } catch (error) {
      console.error('Error resetting assignments:', error);
      toast({
        title: 'Reset Failed',
        description: error.message,
        status: 'error',
        duration: 5000,
      });
    }
  };

  const handleClearAllData = async () => {
    if (!window.confirm('WARNING: This will delete ALL user data except admin. This cannot be undone! Type "DELETE" to confirm.')) {
      return;
    }
    
    const confirmation = prompt('Type "DELETE" to confirm:');
    if (confirmation !== 'DELETE') {
      return;
    }
    
    try {
      await clearAllData();
      
      toast({
        title: 'Data Cleared',
        description: 'All user data has been removed',
        status: 'success',
        duration: 3000,
      });
      
      loadDashboardData();
    } catch (error) {
      console.error('Error clearing data:', error);
      toast({
        title: 'Clear Failed',
        description: error.message,
        status: 'error',
        duration: 5000,
      });
    }
  };

  const handleLogout = () => {
    sessionStorage.clear();
    toast({
      title: 'Logged Out',
      description: 'Admin session ended',
      status: 'info',
      duration: 2000,
    });
    navigate('/login');
  };

  const copyToClipboard = (text) => {
    navigator.clipboard.writeText(text);
    toast({
      title: 'Copied',
      description: 'Text copied to clipboard',
      status: 'success',
      duration: 2000,
    });
  };

  // Filter logic for new user types
  const filteredUsers = users.filter(user => {
    const matchesSearch = searchTerm === '' || 
      user.id.toLowerCase().includes(searchTerm.toLowerCase()) ||
      (user.displayId && user.displayId.toLowerCase().includes(searchTerm.toLowerCase())) ||
      (user.displayInfo?.prolificPid && user.displayInfo.prolificPid.toLowerCase().includes(searchTerm.toLowerCase()));
    
    const matchesFilter = filterType === 'all' ||
      (filterType === 'test' && user.isTest) ||
      (filterType === 'prolific' && user.isProlific) ||
      (filterType === 'preassigned' && user.isPreAssigned) ||
      (filterType === 'autogenerated' && user.isAutoGenerated) ||
      (filterType === 'completed' && user.isCompleted) ||
      (filterType === 'active' && user.isActive);
    
    return matchesSearch && matchesFilter;
  });

  const openUserDetails = (user) => {
    setSelectedUser(user);
    onUserModalOpen();
  };

  if (loading && users.length === 0) {
    return (
      <Flex minH="100vh" align="center" justify="center">
        <VStack spacing={4}>
          <Spinner size="xl" color="blue.500" />
          <Text>Loading admin dashboard...</Text>
        </VStack>
      </Flex>
    );
  }

  return (
    <Box minH="100vh" bg="gray.50">
      {/* Header */}
      <Box bg="white" borderBottom="1px" borderColor="gray.200" py={4}>
        <Container maxW="7xl">
          <HStack justify="space-between">
            <HStack spacing={3}>
              <Text fontSize="2xl">🛡️</Text>
              <VStack align="start" spacing={0}>
                <Heading size="lg">Enhanced Admin Dashboard</Heading>
                <Text fontSize="sm" color="gray.600">
                  Image Evaluation Study Management with 5-Assignment Limit
                </Text>
              </VStack>
            </HStack>
            
            <HStack spacing={3}>
              <Button
                colorScheme="purple"
                onClick={onCreateModalOpen}
                leftIcon={<Text>👥</Text>}
              >
                Create Participants
              </Button>
              <Button
                colorScheme="blue"
                variant="outline"
                onClick={() => navigate('/setup')}
              >
                🔧 System Setup
              </Button>
              <Button
                colorScheme="green"
                variant="outline"
                onClick={onProlificModalOpen}
              >
                🔗 Prolific URL
              </Button>
              <Button
                colorScheme="red"
                variant="outline"
                onClick={handleLogout}
              >
                🚪 Logout
              </Button>
            </HStack>
          </HStack>
        </Container>
      </Box>

      <Container maxW="7xl" py={6}>
        {error && (
          <Alert status="error" mb={6}>
            <AlertIcon />
            <AlertTitle>Dashboard Error:</AlertTitle>
            <AlertDescription>{error}</AlertDescription>
          </Alert>
        )}

        {/* Statistics Overview with new metrics */}
        <SimpleGrid columns={{ base: 1, md: 2, lg: 6 }} spacing={6} mb={8}>
          <Card>
            <CardBody>
              <Stat>
                <StatLabel>Total Participants</StatLabel>
                <StatNumber>{stats.totalUsers}</StatNumber>
                <StatHelpText>
                  <HStack spacing={1}>
                    <Badge colorScheme="purple" size="sm">{stats.preAssignedUsers} Pre-assigned</Badge>
                  </HStack>
                </StatHelpText>
              </Stat>
            </CardBody>
          </Card>

          <Card>
            <CardBody>
              <Stat>
                <StatLabel>By Source</StatLabel>
                <StatNumber fontSize="md">
                  <VStack spacing={1}>
                    <HStack>
                      <Badge colorScheme="blue" size="sm">{stats.prolificUsers}</Badge>
                      <Text fontSize="xs">Prolific</Text>
                    </HStack>
                    <HStack>
                      <Badge colorScheme="orange" size="sm">{stats.testUsers}</Badge>
                      <Text fontSize="xs">Test</Text>
                    </HStack>
                  </VStack>
                </StatNumber>
              </Stat>
            </CardBody>
          </Card>

          <Card>
            <CardBody>
              <Stat>
                <StatLabel>Auto-Generated IDs</StatLabel>
                <StatNumber>{stats.autoGenerated}</StatNumber>
                <StatHelpText>Enhanced Prolific system</StatHelpText>
              </Stat>
            </CardBody>
          </Card>

          <Card>
            <CardBody>
              <Stat>
                <StatLabel>Completed Studies</StatLabel>
                <StatNumber>{stats.completedSurveys}</StatNumber>
                <StatHelpText>
                  {stats.totalUsers > 0 ? Math.round((stats.completedSurveys / stats.totalUsers) * 100) : 0}% completion rate
                </StatHelpText>
              </Stat>
            </CardBody>
          </Card>

          <Card>
            <CardBody>
              <Stat>
                <StatLabel>Image Progress</StatLabel>
                <StatNumber>{stats.averageCompletion}%</StatNumber>
                <StatHelpText>Average completion rate</StatHelpText>
              </Stat>
            </CardBody>
          </Card>

          <Card>
            <CardBody>
              <Stat>
                <StatLabel>Active Users</StatLabel>
                <StatNumber>{stats.activeUsers}</StatNumber>
                <StatHelpText>Currently participating</StatHelpText>
              </Stat>
            </CardBody>
          </Card>
        </SimpleGrid>

        {/* NEW: Assignment Capacity Monitor */}
        <AssignmentCapacityMonitor />

        {/* Management Actions */}
        <Card mb={6} mt={6}>
          <CardHeader>
            <Heading size="md">Management Actions</Heading>
          </CardHeader>
          <CardBody>
            <Accordion allowToggle>
              <AccordionItem>
                <AccordionButton>
                  <Box flex="1" textAlign="left">
                    <Text fontWeight="medium">Participant Management</Text>
                  </Box>
                  <AccordionIcon />
                </AccordionButton>
                <AccordionPanel pb={4}>
                  <HStack spacing={4} wrap="wrap">
                    <Button
                      colorScheme="purple"
                      onClick={onCreateModalOpen}
                    >
                      👥 Create Enhanced Participants
                    </Button>
                    
                    <Button
                      colorScheme="orange"
                      variant="outline"
                      onClick={createTestParticipantsWithEnhancedAssignment}
                      isLoading={loading}
                    >
                      🧪 Quick Test Participants (Enhanced)
                    </Button>
                  </HStack>
                </AccordionPanel>
              </AccordionItem>

              <AccordionItem>
                <AccordionButton>
                  <Box flex="1" textAlign="left">
                    <Text fontWeight="medium">System Maintenance</Text>
                  </Box>
                  <AccordionIcon />
                </AccordionButton>
                <AccordionPanel pb={4}>
                  <HStack spacing={4} wrap="wrap">
                    <Button
                      colorScheme="blue"
                      onClick={loadDashboardData}
                      isLoading={loading}
                    >
                      🔄 Refresh Data
                    </Button>
                    
                    <Button
                      colorScheme="orange"
                      variant="outline"
                      onClick={handleFixAssignments}
                    >
                      🔧 Fix User Assignments
                    </Button>
                    
                    <Button
                      colorScheme="purple"
                      variant="outline"
                      onClick={onStatsModalOpen}
                    >
                      📊 Image Statistics
                    </Button>
                    
                    <Button
                      colorScheme="yellow"
                      variant="outline"
                      onClick={handleResetAssignments}
                    >
                      🔄 Reset Assignment Counts
                    </Button>
                    
                    <Button
                      colorScheme="red"
                      variant="outline"
                      onClick={handleClearAllData}
                    >
                      🗑️ Clear All Data
                    </Button>
                  </HStack>
                </AccordionPanel>
              </AccordionItem>
            </Accordion>
          </CardBody>
        </Card>

        {/* User Management */}
        <Card>
          <CardHeader>
            <HStack justify="space-between">
              <Heading size="md">Participant Management</Heading>
              <HStack spacing={3}>
                <InputGroup maxW="300px">
                  <InputLeftElement>
                    <Text>🔍</Text>
                  </InputLeftElement>
                  <Input
                    placeholder="Search users or Prolific IDs..."
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                  />
                </InputGroup>
                
                <Select
                  value={filterType}
                  onChange={(e) => setFilterType(e.target.value)}
                  maxW="150px"
                >
                  <option value="all">All Users</option>
                  <option value="preassigned">Pre-assigned</option>
                  <option value="prolific">Prolific</option>
                  <option value="autogenerated">Auto-Generated</option>
                  <option value="test">Test</option>
                  <option value="completed">Completed</option>
                  <option value="active">Active</option>
                </Select>
              </HStack>
            </HStack>
          </CardHeader>
          <CardBody>
            <TableContainer>
              <Table variant="simple" size="sm">
                <Thead>
                  <Tr>
                    <Th>User ID / Prolific PID</Th>
                    <Th>Type</Th>
                    <Th>Progress</Th>
                    <Th>Study Status</Th>
                    <Th>Assignment System</Th>
                    <Th>Created</Th>
                    <Th>Actions</Th>
                  </Tr>
                </Thead>
                <Tbody>
                  {filteredUsers.map(user => (
                    <Tr key={user.id}>
                      <Td>
                        <VStack align="start" spacing={0}>
                          <Text fontSize="sm" fontFamily="mono">
                            {user.isAutoGenerated && user.displayInfo?.prolificPid ? (
                              <>
                                <Text fontWeight="bold" color="blue.600">
                                  {user.displayInfo.prolificPid}
                                </Text>
                                <Text fontSize="xs" color="gray.500">
                                  {user.id.substring(0, 20)}...
                                </Text>
                              </>
                            ) : (
                              user.id.length > 20 ? `${user.id.substring(0, 20)}...` : user.id
                            )}
                          </Text>
                          {user.displayId && user.displayId !== user.id && (
                            <Text fontSize="xs" color="gray.500" fontFamily="mono">
                              {user.displayId}
                            </Text>
                          )}
                        </VStack>
                      </Td>
                      <Td>
                        <HStack spacing={1} wrap="wrap">
                          {user.isPreAssigned && <Badge colorScheme="purple" size="sm">Pre-assigned</Badge>}
                          {user.isTest && <Badge colorScheme="orange" size="sm">Test</Badge>}
                          {user.isProlific && <Badge colorScheme="blue" size="sm">Prolific</Badge>}
                          {user.isAutoGenerated && <Badge colorScheme="cyan" size="sm">Auto-ID</Badge>}
                          {!user.isTest && !user.isProlific && !user.isPreAssigned && !user.isAutoGenerated && <Badge colorScheme="gray" size="sm">Direct</Badge>}
                        </HStack>
                      </Td>
                      <Td>
                        <VStack align="start" spacing={1}>
                          <Text fontSize="sm">
                            {user.completedImages}/{user.totalImages} images
                          </Text>
                          <Progress
                            value={user.completionPercentage}
                            size="sm"
                            colorScheme={user.completionPercentage === 100 ? "green" : "blue"}
                            w="100px"
                          />
                        </VStack>
                      </Td>
                      <Td>
                        <VStack align="start" spacing={0}>
                          {user.isCompleted ? (
                            <Badge colorScheme="green">✅ Completed</Badge>
                          ) : (
                            <VStack spacing={1}>
                              <Badge colorScheme={user.hasConsented ? "blue" : "gray"} size="sm">
                                {user.hasConsented ? "✅ Consented" : "⏸️ No Consent"}
                              </Badge>
                              <Badge colorScheme={user.demographicsCompleted ? "purple" : "gray"} size="sm">
                                {user.demographicsCompleted ? "📊 Demographics" : "📊 Pending"}
                              </Badge>
                            </VStack>
                          )}
                        </VStack>
                      </Td>
                      <Td>
                        <VStack align="start" spacing={0}>
                          {user.enhancedAssignment ? (
                            <Badge colorScheme="green" size="sm">✨ Enhanced</Badge>
                          ) : (
                            <Badge colorScheme="gray" size="sm">Legacy</Badge>
                          )}
                          {user.preAssignmentDetails?.assignmentSystem && (
                            <Text fontSize="xs" color="gray.500">
                              {user.preAssignmentDetails.assignmentSystem.includes('5_limit') ? '5-limit' : 'Standard'}
                            </Text>
                          )}
                        </VStack>
                      </Td>
                      <Td>
                        <Text fontSize="xs" color="gray.600">
                          {user.createdAt?.toDate?.()?.toLocaleDateString() || 'Unknown'}
                        </Text>
                      </Td>
                      <Td>
                        <HStack spacing={1}>
                          <Button
                            size="xs"
                            onClick={() => openUserDetails(user)}
                          >
                            👁️ View
                          </Button>
                          <Button
                            size="xs"
                            colorScheme="red"
                            variant="outline"
                            onClick={() => handleDeleteUser(user.id)}
                          >
                            🗑️ Delete
                          </Button>
                        </HStack>
                      </Td>
                    </Tr>
                  ))}
                </Tbody>
              </Table>
            </TableContainer>
            
            {filteredUsers.length === 0 && (
              <Text textAlign="center" py={8} color="gray.500">
                No users found matching your criteria
              </Text>
            )}
          </CardBody>
        </Card>
      </Container>

      {/* Create Participants Modal - Enhanced */}
      <Modal isOpen={isCreateModalOpen} onClose={onCreateModalClose} size="lg">
        <ModalOverlay />
        <ModalContent>
          <ModalHeader>Create Enhanced Pre-Assigned Participants</ModalHeader>
          <ModalCloseButton />
          <ModalBody pb={6}>
            <VStack spacing={6}>
              <Alert status="info">
                <AlertIcon />
                <Box>
                  <AlertTitle>Enhanced Assignment System</AlertTitle>
                  <AlertDescription>
                    This will create participants with the new 5-assignment limit system. 
                    Each image can only be assigned to 5 users maximum, ensuring balanced distribution.
                  </AlertDescription>
                </Box>
              </Alert>

              <SimpleGrid columns={2} spacing={4} w="full">
                <FormControl>
                  <FormLabel>Number of Participants</FormLabel>
                  <NumberInput
                    value={participantCount}
                    onChange={(value) => setParticipantCount(parseInt(value) || 1)}
                    min={1}
                    max={100}
                  >
                    <NumberInputField />
                    <NumberInputStepper>
                      <NumberIncrementStepper />
                      <NumberDecrementStepper />
                    </NumberInputStepper>
                  </NumberInput>
                  <FormHelperText>How many participants to create</FormHelperText>
                </FormControl>

                <FormControl>
                  <FormLabel>Images per Participant</FormLabel>
                  <NumberInput
                    value={imagesPerParticipant}
                    onChange={(value) => setImagesPerParticipant(parseInt(value) || 10)}
                    min={10}
                    max={10}
                    isDisabled
                  >
                    <NumberInputField />
                    <NumberInputStepper>
                      <NumberIncrementStepper />
                      <NumberDecrementStepper />
                    </NumberInputStepper>
                  </NumberInput>
                  <FormHelperText>Fixed at 10 (5 from each set)</FormHelperText>
                </FormControl>

                <FormControl>
                  <FormLabel>ID Prefix</FormLabel>
                  <Select
                    value={participantPrefix}
                    onChange={(e) => setParticipantPrefix(e.target.value)}
                  >
                    <option value="P">P (P0001, P0002, ...)</option>
                    <option value="S">S (S0001, S0002, ...)</option>
                    <option value="U">U (U0001, U0002, ...)</option>
                    <option value="numeric">Numeric Only (0001, 0002, ...)</option>
                  </Select>
                  <FormHelperText>Prefix for participant IDs</FormHelperText>
                </FormControl>

                <FormControl>
                  <FormLabel>Starting Number</FormLabel>
                  <NumberInput
                    value={startingNumber}
                    onChange={(value) => setStartingNumber(parseInt(value) || 1)}
                    min={1}
                  >
                    <NumberInputField />
                    <NumberInputStepper>
                      <NumberIncrementStepper />
                      <NumberDecrementStepper />
                    </NumberInputStepper>
                  </NumberInput>
                  <FormHelperText>Starting number for ID sequence</FormHelperText>
                </FormControl>
              </SimpleGrid>

              <Box w="full" p={4} bg="green.50" borderRadius="md">
                <Text fontWeight="medium" mb={2}>Enhanced Assignment Preview:</Text>
                <Text fontSize="sm" color="gray.700">
                  Will create {participantCount} participants with IDs: {' '}
                  {Array.from({ length: Math.min(3, participantCount) }, (_, i) => {
                    const number = (startingNumber + i).toString().padStart(4, '0');
                    return participantPrefix === 'numeric' ? number : `${participantPrefix}${number}`;
                  }).join(', ')}
                  {participantCount > 3 && ', ...'}
                </Text>
                <Text fontSize="sm" color="gray.700">
                  Each will have 10 mixed images (5 from each set) with 5-assignment limit enforcement
                </Text>
                <Text fontSize="sm" color="green.700" fontWeight="medium">
                  ✨ Enhanced system prioritizes least-assigned images
                </Text>
              </Box>

              <Alert status="success" size="sm">
                <AlertIcon />
                <Text fontSize="sm">
                  The enhanced assignment system will automatically check capacity and 
                  ensure balanced distribution across both image sets.
                </Text>
              </Alert>
            </VStack>
          </ModalBody>
          <ModalFooter>
            <Button mr={3} onClick={onCreateModalClose}>
              Cancel
            </Button>
            <Button
              colorScheme="purple"
              onClick={createPreAssignedParticipants}
              isLoading={createLoading}
              loadingText="Creating Enhanced Participants..."
            >
              Create Enhanced Participants
            </Button>
          </ModalFooter>
        </ModalContent>
      </Modal>

      {/* User Details Modal with enhanced Prolific info */}
      <Modal isOpen={isUserModalOpen} onClose={onUserModalClose} size="xl">
        <ModalOverlay />
        <ModalContent>
          <ModalHeader>User Details</ModalHeader>
          <ModalCloseButton />
          <ModalBody pb={6}>
            {selectedUser && (
              <VStack spacing={4} align="start">
                <SimpleGrid columns={2} spacing={4} w="full">
                  <Box>
                    <Text fontWeight="bold" mb={1}>Internal ID:</Text>
                    <Code fontSize="xs">{selectedUser.id}</Code>
                  </Box>
                  <Box>
                    <Text fontWeight="bold" mb={1}>Display ID:</Text>
                    <Code fontSize="xs">{selectedUser.displayId || 'N/A'}</Code>
                  </Box>
                  {selectedUser.displayInfo?.prolificPid && (
                    <Box>
                      <Text fontWeight="bold" mb={1}>Prolific PID:</Text>
                      <Code fontSize="xs" color="blue.600">{selectedUser.displayInfo.prolificPid}</Code>
                    </Box>
                  )}
                  <Box>
                    <Text fontWeight="bold" mb={1}>Progress:</Text>
                    <Text>{selectedUser.completedImages}/{selectedUser.totalImages} images ({selectedUser.completionPercentage}%)</Text>
                  </Box>
                  <Box>
                    <Text fontWeight="bold" mb={1}>Study Status:</Text>
                    <VStack align="start" spacing={1}>
                      <Badge colorScheme={selectedUser.hasConsented ? "green" : "red"}>
                        {selectedUser.hasConsented ? "✅ Consented" : "❌ No Consent"}
                      </Badge>
                      <Badge colorScheme={selectedUser.demographicsCompleted ? "purple" : "gray"}>
                        {selectedUser.demographicsCompleted ? "📊 Demographics Done" : "📊 Demographics Pending"}
                      </Badge>
                      <Badge colorScheme={selectedUser.isCompleted ? "green" : "blue"}>
                        {selectedUser.isCompleted ? "✅ Completed" : "🔄 In Progress"}
                      </Badge>
                    </VStack>
                  </Box>
                  <Box>
                    <Text fontWeight="bold" mb={1}>User Type:</Text>
                    <HStack spacing={1} wrap="wrap">
                      {selectedUser.isPreAssigned && <Badge colorScheme="purple">Pre-assigned</Badge>}
                      {selectedUser.isTest && <Badge colorScheme="orange">Test</Badge>}
                      {selectedUser.isProlific && <Badge colorScheme="blue">Prolific</Badge>}
                      {selectedUser.isAutoGenerated && <Badge colorScheme="cyan">Auto-Generated ID</Badge>}
                    </HStack>
                  </Box>
                </SimpleGrid>
                
                {/* Enhanced Assignment Information */}
                {selectedUser.enhancedAssignment && (
                  <Box w="full">
                    <Text fontWeight="bold" mb={2}>Enhanced Assignment System:</Text>
                    <Box bg="green.50" p={3} borderRadius="md">
                      <VStack align="start" spacing={1}>
                        <Text fontSize="sm">
                          <Badge colorScheme="green" size="sm">✨ Enhanced System</Badge> 
                          {' '}5-Assignment Limit Active
                        </Text>
                        {selectedUser.preAssignmentDetails?.mixedOrder && (
                          <Text fontSize="sm">
                            Mixed Order: <Code fontSize="xs">{selectedUser.preAssignmentDetails.mixedOrder}</Code>
                          </Text>
                        )}
                        <Text fontSize="sm">
                          Assignment System: <Code fontSize="xs">{selectedUser.preAssignmentDetails?.assignmentSystem || 'enhanced_balanced_5_limit'}</Code>
                        </Text>
                      </VStack>
                    </Box>
                  </Box>
                )}
                
                {(selectedUser.prolificData || selectedUser.prolificPid) && (
                  <Box w="full">
                    <Text fontWeight="bold" mb={2}>Prolific Integration Data:</Text>
                    <Box bg="blue.50" p={3} borderRadius="md">
                      <VStack align="start" spacing={1}>
                        <Text fontSize="sm">
                          PID: <Code fontSize="xs">{selectedUser.prolificPid || selectedUser.prolificData?.prolificPid}</Code>
                        </Text>
                        {selectedUser.prolificData?.studyId && (
                          <Text fontSize="sm">
                            Study ID: <Code fontSize="xs">{selectedUser.prolificData.studyId}</Code>
                          </Text>
                        )}
                        {selectedUser.prolificData?.sessionId && (
                          <Text fontSize="sm">
                            Session ID: <Code fontSize="xs">{selectedUser.prolificData.sessionId}</Code>
                          </Text>
                        )}
                        {selectedUser.isAutoGenerated && (
                          <Text fontSize="sm">
                            <Badge colorScheme="green" size="sm">✓ Auto-Login System</Badge>
                          </Text>
                        )}
                      </VStack>
                    </Box>
                  </Box>
                )}

                {selectedUser.preAssignmentDetails && (
                  <Box w="full">
                    <Text fontWeight="bold" mb={2}>Pre-Assignment Details:</Text>
                    <Box bg="purple.50" p={3} borderRadius="md">
                      <VStack align="start" spacing={1}>
                        <Text fontSize="sm">Pre-assigned: <Code fontSize="xs">{selectedUser.preAssignedAt?.toDate?.()?.toLocaleString() || 'Yes'}</Code></Text>
                        <Text fontSize="sm">Set 1 Images: <Badge size="sm">{selectedUser.preAssignmentDetails.set1Count || 'N/A'}</Badge></Text>
                        <Text fontSize="sm">Set 2 Images: <Badge size="sm">{selectedUser.preAssignmentDetails.set2Count || 'N/A'}</Badge></Text>
                        <Text fontSize="sm">Total Images: <Badge size="sm">{selectedUser.preAssignmentDetails.imagesPerParticipant || selectedUser.totalImages}</Badge></Text>
                        {selectedUser.preAssignmentDetails.enhancedAssignment && (
                          <Text fontSize="sm">Assignment Type: <Badge colorScheme="green" size="sm">✨ Enhanced (5-limit)</Badge></Text>
                        )}
                        {selectedUser.imageAssignmentStatus && (
                          <Text fontSize="sm">Assignment Status: <Badge colorScheme="blue" size="sm">{selectedUser.imageAssignmentStatus}</Badge></Text>
                        )}
                      </VStack>
                    </Box>
                  </Box>
                )}
                
                {selectedUser.assignedImages && (
                  <Box w="full">
                    <Text fontWeight="bold" mb={2}>Assigned Images ({selectedUser.assignedImages.length}):</Text>
                    <Box maxH="200px" overflowY="auto">
                      <UnorderedList spacing={1}>
                        {selectedUser.assignedImages.map((img, idx) => (
                          <ListItem key={idx} fontSize="sm">
                            <Code fontSize="xs">{img.id || img.name}</Code> - {img.set}
                            {selectedUser.completedImageIds?.includes(img.id || img.name) && (
                              <Badge ml={2} colorScheme="green" size="sm">Completed</Badge>
                            )}
                          </ListItem>
                        ))}
                      </UnorderedList>
                    </Box>
                  </Box>
                )}
              </VStack>
            )}
          </ModalBody>
          <ModalFooter>
            <Button onClick={onUserModalClose}>Close</Button>
          </ModalFooter>
        </ModalContent>
      </Modal>

      {/* Image Statistics Modal */}
      <Modal isOpen={isStatsModalOpen} onClose={onStatsModalClose} size="lg">
        <ModalOverlay />
        <ModalContent>
          <ModalHeader>Image Assignment Statistics</ModalHeader>
          <ModalCloseButton />
          <ModalBody pb={6}>
            {imageStats ? (
              <VStack spacing={6}>
                <SimpleGrid columns={2} spacing={6} w="full">
                  <Card>
                    <CardHeader>
                      <Heading size="sm">Set 1 (Images 1-1200)</Heading>
                    </CardHeader>
                    <CardBody>
                      <VStack spacing={2} align="start">
                        {Object.entries(imageStats.set1 || {}).map(([assignments, count]) => (
                          <HStack key={assignments} justify="space-between" w="full">
                            <Text fontSize="sm">{assignments} assignments:</Text>
                            <Badge>{count} images</Badge>
                          </HStack>
                        ))}
                      </VStack>
                    </CardBody>
                  </Card>
                  
                  <Card>
                    <CardHeader>
                      <Heading size="sm">Set 2 (Images 1201-2400)</Heading>
                    </CardHeader>
                    <CardBody>
                      <VStack spacing={2} align="start">
                        {Object.entries(imageStats.set2 || {}).map(([assignments, count]) => (
                          <HStack key={assignments} justify="space-between" w="full">
                            <Text fontSize="sm">{assignments} assignments:</Text>
                            <Badge>{count} images</Badge>
                          </HStack>
                        ))}
                      </VStack>
                    </CardBody>
                  </Card>
                </SimpleGrid>
              </VStack>
            ) : (
              <Text>Loading statistics...</Text>
            )}
          </ModalBody>
          <ModalFooter>
            <Button onClick={onStatsModalClose}>Close</Button>
          </ModalFooter>
        </ModalContent>
      </Modal>

      {/* Prolific URL Modal */}
      <Modal isOpen={isProlificModalOpen} onClose={onProlificModalClose} size="lg">
        <ModalOverlay />
        <ModalContent>
          <ModalHeader>Prolific Study URL</ModalHeader>
          <ModalCloseButton />
          <ModalBody pb={6}>
            <VStack spacing={4}>
              <Text fontSize="sm" color="gray.600">
                Use this URL as your study link in Prolific. The placeholders will be automatically replaced with participant data.
              </Text>
              
              <Box w="full">
                <HStack mb={2}>
                  <Text fontWeight="bold">Study URL:</Text>
                  <Button size="xs" onClick={() => copyToClipboard(prolificUrl)}>
                    📋 Copy
                  </Button>
                </HStack>
                <Textarea
                  value={prolificUrl}
                  isReadOnly
                  fontFamily="mono"
                  fontSize="sm"
                  rows={4}
                />
              </Box>
              
              <Alert status="info" size="sm">
                <AlertIcon />
                <Text fontSize="sm">
                  Participants will be automatically logged in when they click this link from Prolific.
                  Make sure to set the completion URL in Prolific to redirect participants 
                  back after they finish the study.
                </Text>
              </Alert>
              
              <Alert status="success" size="sm">
                <AlertIcon />
                <Text fontSize="sm">
                  <strong>✓ Enhanced Auto-Login Integration Active:</strong> Participants will be seamlessly 
                  logged in with auto-generated IDs and their Prolific data will be captured automatically.
                  The new 5-assignment limit system ensures balanced image distribution.
                </Text>
              </Alert>
            </VStack>
          </ModalBody>
          <ModalFooter>
            <Button onClick={onProlificModalClose}>Close</Button>
          </ModalFooter>
        </ModalContent>
      </Modal>
    </Box>
  );
};

export default AdminDashboard;